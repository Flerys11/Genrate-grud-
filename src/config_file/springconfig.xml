<config>

<databaseRef>
    <int4>int</int4>
    <varchar>String</varchar>
    <timestamp>Timestamp</timestamp>
    <bool>boolean</bool>
    <float8>double</float8>
    <int8>long</int8>
    <int2>int</int2>
    <serial>int</serial>
    <int1>int</int1>
    <numeric>BigDecimal</numeric>
    <date>Date</date>
    <time>Time</time>
    <bytea>byte[]</bytea>
    <text>String</text>
    <float4>float</float4>
</databaseRef>

    <returnType>
        <findAll>ResponseEntity&lt;Page&lt;#CLASS_NAME#&gt;&gt;</findAll>
        <findOne>ResponseEntity&lt;#CLASS_NAME#&gt;</findOne>
        <insert>ResponseEntity&lt;#CLASS_NAME#&gt;</insert>
        <update>ResponseEntity&lt;#CLASS_NAME#&gt;</update>
        <delete>void</delete>
    </returnType>
    
    <args>
        <findAll>Pageable pageable</findAll>
        <findOne>@PathVariable Integer id</findOne>
        <insert>@RequestBody #CLASS_NAME# #CLASS_NAME_2#</insert>
        <update>@PathVariable Integer id, @RequestBody #CLASS_NAME# #CLASS_NAME_2#</update>
        <delete>@PathVariable Integer id</delete>
        <constructor>#CLASS_NAME#Repository #CLASS_NAME_2#Repository</constructor>
    </args>

    <root>
        <findAll>@GetMapping</findAll>
        <findOne>@GetMapping("/{id}")</findOne>
        <insert>@PostMapping</insert>
        <update>@PutMapping("/{id}")</update>
        <delete>@DeleteMapping("/{id}")</delete>
    </root>
    
    <necessaryImport>
        <utilImport>#MODEL_PACKAGE#.#CLASS_NAME#</utilImport>
        <utilImport>template.generation.repository.#CLASS_NAME#Repository</utilImport>
        <utilImport>org.springframework.beans.factory.annotation.Autowired</utilImport>
        <utilImport>org.springframework.http.ResponseEntity</utilImport>
        <utilImport>org.springframework.web.bind.annotation.*</utilImport>
        <utilImport>org.springframework.http.HttpStatus</utilImport>
        <utilImport>java.util.Optional</utilImport>
        <utilImport>org.springframework.data.domain.Page</utilImport>
        <utilImport>org.springframework.data.domain.Pageable</utilImport>

        <utilImportServiceAuth>java.util.List</utilImportServiceAuth>
        <utilImportServiceAuth>org.springframework.security.authentication.AuthenticationManager</utilImportServiceAuth>
        <utilImportServiceAuth>org.springframework.security.authentication.UsernamePasswordAuthenticationToken</utilImportServiceAuth>
        <utilImportServiceAuth>org.springframework.security.crypto.password.PasswordEncoder</utilImportServiceAuth>
        <utilImportServiceAuth>org.springframework.security.crypto.password.PasswordEncoder</utilImportServiceAuth>
        <utilImportServiceAuth>org.springframework.stereotype.Service;</utilImportServiceAuth>
        <utilImportServiceAuth>template.generation.model.AuthenticationResponse</utilImportServiceAuth>
        <utilImportServiceAuth>template.generation.repository.model.#CLASSNAME1#</utilImportServiceAuth>
        <utilImportServiceAuth>template.generation.model.#CLASSNAME1#Repository</utilImportServiceAuth>
        <utilImportServiceAuth>template.generation.repository.model.#CLASSNAME2#</utilImportServiceAuth>
        <utilImportServiceAuth>template.generation.model.#CLASSNAME2#Repository</utilImportServiceAuth>

        <utilImportJwt>io.jsonwebtoken.Claims</utilImportJwt>
        <utilImportJwt>io.jsonwebtoken.Jwts</utilImportJwt>
        <utilImportJwt>io.jsonwebtoken.io.Decoders</utilImportJwt>
        <utilImportJwt>io.jsonwebtoken.security.Keys</utilImportJwt>
        <utilImportJwt>org.springframework.security.core.userdetails.UserDetails</utilImportJwt>
        <utilImportJwt>io.jsonwebtoken.security.Keys</utilImportJwt>
        <utilImportJwt>javax.crypto.SecretKey</utilImportJwt>
        <utilImportJwt>java.util.Date</utilImportJwt>
        <utilImportJwt>java.util.function.Function</utilImportJwt>
        <utilImportJwt>template.generation.repository.model.#CLASSNAME1#</utilImportJwt>
        <utilImportJwt>template.generation.model.#CLASSNAME2#Repository</utilImportJwt>

        <utilImportDetail>org.springframework.security.core.userdetails.UserDetails</utilImportDetail>
        <utilImportDetail>org.springframework.security.core.userdetails.UserDetailsService</utilImportDetail>
        <utilImportDetail>org.springframework.security.core.userdetails.UsernameNotFoundException</utilImportDetail>
        <utilImportDetail>org.springframework.stereotype.Service</utilImportDetail>
        <utilImportDetail>template.generation.model.#CLASSNAME1#Repository</utilImportDetail>

        <utilImportSecurityConfig>com.example.authet.filter.JwtAuthenticationFilter</utilImportSecurityConfig>
        <utilImportSecurityConfig>com.example.authet.service.UserDetailsServiceImp</utilImportSecurityConfig>
        <utilImportSecurityConfig>org.springframework.context.annotation.Bean</utilImportSecurityConfig>
        <utilImportSecurityConfig>org.springframework.context.annotation.Configuration</utilImportSecurityConfig>
        <utilImportSecurityConfig>org.springframework.http.HttpStatus</utilImportSecurityConfig>
        <utilImportSecurityConfig>org.springframework.security.authentication.AuthenticationManager</utilImportSecurityConfig>    
        <utilImportSecurityConfig>org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration</utilImportSecurityConfig>    
        <utilImportSecurityConfig>org.springframework.security.config.annotation.web.builders.HttpSecurity</utilImportSecurityConfig>    
        <utilImportSecurityConfig>org.springframework.security.config.annotation.web.configuration.EnableWebSecurity</utilImportSecurityConfig>    
        <utilImportSecurityConfig>org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer</utilImportSecurityConfig>    
        <utilImportSecurityConfig>org.springframework.security.config.http.SessionCreationPolicy</utilImportSecurityConfig>    
        <utilImportSecurityConfig>org.springframework.security.core.context.SecurityContextHolder</utilImportSecurityConfig>    
        <utilImportSecurityConfig>org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</utilImportSecurityConfig>    
        <utilImportSecurityConfig>org.springframework.security.crypto.password.PasswordEncoder</utilImportSecurityConfig>    
        <utilImportSecurityConfig>org.springframework.security.web.SecurityFilterChain</utilImportSecurityConfig>    
        <utilImportSecurityConfig>org.springframework.security.web.authentication.HttpStatusEntryPoint</utilImportSecurityConfig>    
        <utilImportSecurityConfig>org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter</utilImportSecurityConfig>  
        <utilImportSecurityConfig>org.springframework.web.cors.CorsConfiguration</utilImportSecurityConfig>    
        <utilImportSecurityConfig>org.springframework.web.cors.CorsConfiguration</utilImportSecurityConfig>    
        <utilImportSecurityConfig>org.springframework.web.cors.UrlBasedCorsConfigurationSource</utilImportSecurityConfig>    
  

        <utilImportLogout>jakarta.servlet.http.HttpServletRequest</utilImportLogout>
        <utilImportLogout>jakarta.servlet.http.HttpServletResponse</utilImportLogout>
        <utilImportLogout>org.springframework.context.annotation.Configuration</utilImportLogout>
        <utilImportLogout>org.springframework.security.core.Authentication</utilImportLogout>
        <utilImportLogout>org.springframework.security.web.authentication.logout.LogoutHandler</utilImportLogout>
        <utilImportLogout>template.generation.repository.#CLASSNAME2#Repository</utilImportLogout>
        <utilImportLogout>template.generation.model.#CLASSNAME2#</utilImportLogout>

         <utilImportFilter>com.example.authet.service.JwtService</utilImportFilter>
         <utilImportFilter>com.example.authet.service.UserDetailsServiceImp</utilImportFilter>
         <utilImportFilter>io.micrometer.common.lang.NonNull</utilImportFilter>
         <utilImportFilter>jakarta.servlet.FilterChain</utilImportFilter>
         <utilImportFilter>jakarta.servlet.ServletException</utilImportFilter>
         <utilImportFilter>jakarta.servlet.http.HttpServletRequest</utilImportFilter>
         <utilImportFilter>jakarta.servlet.http.HttpServletResponse</utilImportFilter>
         <utilImportFilter>org.springframework.security.authentication.UsernamePasswordAuthenticationToken</utilImportFilter>
         <utilImportFilter>org.springframework.security.core.context.SecurityContextHolder</utilImportFilter>
         <utilImportFilter>org.springframework.security.core.userdetails.UserDetails</utilImportFilter>
         <utilImportFilter>org.springframework.security.web.authentication.WebAuthenticationDetailsSource</utilImportFilter>
         <utilImportFilter>org.springframework.stereotype.Component</utilImportFilter>
         <utilImportFilter>org.springframework.web.filter.OncePerRequestFilter</utilImportFilter>
         <utilImportFilter>java.io.IOException</utilImportFilter>

        <utilImportAuthContr>com.example.authet.model.AuthenticationResponse</utilImportAuthContr>
        <utilImportAuthContr>com.example.authet.model.#CLASSNAME1#</utilImportAuthContr>
        <utilImportAuthContr>com.example.authet.service.AuthenticationService</utilImportAuthContr>
        <utilImportAuthContr>org.springframework.http.ResponseEntity</utilImportAuthContr>
        <utilImportAuthContr>org.springframework.web.bind.annotation.PostMapping</utilImportAuthContr>
        <utilImportAuthContr>org.springframework.web.bind.annotation.RequestBody</utilImportAuthContr>
        <utilImportAuthContr>org.springframework.web.bind.annotation.RestController</utilImportAuthContr>
        
    </necessaryImport>
    
    <util>
        <private>private</private>
        <definition>public class</definition>
        <public>public</public>
        <extension>.java</extension>
        <import>import</import>
        <package>package</package>
        <packageName>template.generation.controller</packageName>
        <startPackageService>template.generation.controller</startPackageService>
        <modelPackage>template.generation.model</modelPackage>
        <packageNameService>template.generation.service</packageNameService>
        <packageNameConfig>template.generation.config</packageNameConfig>
        <packageNameFilter>template.generation.filter</packageNameFilter>
        <endLine>;</endLine>
        <startBlock>{</startBlock>
        <endBlock>}</endBlock>
        <startPackage>;</startPackage>
        <endPackage></endPackage>
        <startClass>{</startClass>
        <endClass>}</endClass>
        <this>this.</this>
        <attribution>=</attribution>
        <return>return</return>
        <service>@Service</service>
        <override>@Override</override>
        <conf>@Configuration</conf>
        <bean>@Bean</bean>
        <component>@Component</component>
        <enableWebSecurity>@EnableWebSecurity</enableWebSecurity>
        <controllerAnnotation>@RestController</controllerAnnotation>
        <constructorAnnotation>@Autowired</constructorAnnotation>
        <root>@RequestMapping("/#CLASS_NAME_2#s")</root>
        <extends></extends>
        <fin>final</fin>
        <controllerMotherClass></controllerMotherClass>
        <cors>@CrossOrigin("*")</cors>
        <repository>#CLASS_NAME#Repository #CLASS_NAME_2#Repository</repository>
    </util>



    <findAllContent>
            try {
                Page&lt;#CLASS_NAME#&gt; page = #CLASS_NAME_2#Repository.findAll(pageable);
                if (page.hasContent()) {
                    return ResponseEntity.ok().body(page);
                } else {
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
                }
            }catch (Exception e) {
               return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
            }
    </findAllContent>

    <attributfilter>
    private final JwtService jwtService;
    private final UserDetailsServiceImp userDetailsService;


    public JwtAuthenticationFilter(JwtService jwtService, UserDetailsServiceImp userDetailsService) {
        this.jwtService = jwtService;
        this.userDetailsService = userDetailsService;
    }
    </attributfilter>

    <contentfilter>
    @Override
    protected void doFilterInternal(
            @NonNull HttpServletRequest request,
            @NonNull HttpServletResponse response,
            @NonNull FilterChain filterChain)
            throws ServletException, IOException {

        String authHeader = request.getHeader("Authorization");

        if(authHeader == null || !authHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request,response);
            return;
        }

        String token = authHeader.substring(7);
        String username = jwtService.extractUsername(token);

        if(username != null #OR# SecurityContextHolder.getContext().getAuthentication() == null) {

            UserDetails userDetails = userDetailsService.loadUserByUsername(username);


            if(jwtService.isValid(token, userDetails)) {
                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                        userDetails, null, userDetails.getAuthorities()
                );

                authToken.setDetails(
                        new WebAuthenticationDetailsSource().buildDetails(request)
                );

                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        }
        filterChain.doFilter(request, response);


    }
    </contentfilter>

    <findOneContent>
        try{
            #CLASS_NAME# one = #CLASS_NAME_2#Repository.findById(id).orElse(null);
            if(one != null){
                return ResponseEntity.ok().body(one);
            }else{
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(one);
            }
        }catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    </findOneContent>

    <insertContent>
        try{
            #CLASS_NAME# creation = #CLASS_NAME_2#Repository.save(#CLASS_NAME_2#);
            if(creation != null){
               return ResponseEntity.status(HttpStatus.CREATED).body(creation);
            }else{
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(creation);
            }
        }catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    </insertContent>

    <attributions>
        private final UserDetailsServiceImp userDetailsServiceImp;

            private final JwtAuthenticationFilter jwtAuthenticationFilter;

            private final CustomLogoutHandler logoutHandler;

            public SecurityConfig(UserDetailsServiceImp userDetailsServiceImp,
                                JwtAuthenticationFilter jwtAuthenticationFilter,
                                CustomLogoutHandler logoutHandler) {
                this.userDetailsServiceImp = userDetailsServiceImp;
                this.jwtAuthenticationFilter = jwtAuthenticationFilter;
                this.logoutHandler = logoutHandler;
            }
    </attributions>

    <SecurityFilterChain>
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(
                        req -> req.requestMatchers("/login/**","/register/**")
                                .permitAll()
                                .requestMatchers("/admin_only/**").hasAuthority("ADMIN")
                                .anyRequest().authenticated()
                )
                .userDetailsService(userDetailsServiceImp)
                .sessionManagement(session -> session
                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                )
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)
                .exceptionHandling(
                        e -> e.accessDeniedHandler(
                                        (request, response, accessDeniedException) -> response.setStatus(403)
                                )
                                .authenticationEntryPoint(new HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED))
                )
                .logout(l -> l
                        .logoutUrl("/logout")
                        .addLogoutHandler(logoutHandler)
                        .logoutSuccessHandler((request, response, authentication) -> SecurityContextHolder.clearContext())
                )
                .cors();

        return http.build();
    }
    </SecurityFilterChain>

    <attributionsLogout>
        private final TokenRepository tokenRepository;

        public CustomLogoutHandler(TokenRepository tokenRepository) {
            this.tokenRepository = tokenRepository;
        }
    </attributionsLogout>

    <logout>
        @Override
        public void logout(HttpServletRequest request,
                        HttpServletResponse response,
                        Authentication authentication) {
            String authHeader = request.getHeader("Authorization");

            if(authHeader == null || !authHeader.startsWith("Bearer ")) {
                return;
            }

            String token = authHeader.substring(7);
            Token storedToken = tokenRepository.findByToken(token).orElse(null);

            if(storedToken != null) {
                storedToken.setLoggedOut(true);
                tokenRepository.save(storedToken);
            }
        }
    </logout>

    <passwordEncoder>
        @Bean
        public PasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder();
        }

        @Bean
        public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
            return configuration.getAuthenticationManager();
        }

        @Bean
        public CorsConfigurationSource corsConfigurationSource() {
            CorsConfiguration configuration = new CorsConfiguration();
            configuration.setAllowedOrigins(Arrays.asList("http://localhost:3000"));
            configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE"));
            configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type"));
            UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
            source.registerCorsConfiguration("/**", configuration);
            return source;
        }
    </passwordEncoder>

    <authcontroller>
        private final AuthenticationService authService;

        public AuthenticationController(AuthenticationService authService) {
            this.authService = authService;
        }


        @PostMapping("/register")
        public ResponseEntity#REPONSE# register(
                @RequestBody #CLASSNAME1# request
        ) {
            return ResponseEntity.ok(authService.register(request));
        }

        @PostMapping("/login")
        public ResponseEntity#REPONSE# login(
                @RequestBody #CLASSNAME1# request
        ) {
            return ResponseEntity.ok(authService.authenticate(request));
        }
    </authcontroller>

    <updateContent>
        try{
            Optional&lt;#CLASS_NAME#&gt; opt = #CLASS_NAME_2#Repository.findById(id);
            if(opt.isPresent()){
                #CLASS_NAME# update = opt.get();
                #CLASS_NAME_2#.setId(update.getId());
                #CLASS_NAME_2#Repository.save(#CLASS_NAME_2#);
                if(#CLASS_NAME_2# != null){
                    return ResponseEntity.ok().body(#CLASS_NAME_2#);
                }else{
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).body( #CLASS_NAME_2#);
                }
            }else{
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body( #CLASS_NAME_2#);
            }
        }catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    </updateContent>


    <deleteContent>
        #CLASS_NAME_2#Repository.deleteById(id);
    </deleteContent>

    <constructorContent>
        this.#CLASS_NAME_2#Repository = #CLASS_NAME_2#Repository;
    </constructorContent>


    <suppContent>

    </suppContent>

    </config>